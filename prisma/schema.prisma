//schema local

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  password  String
  role      String     @default("customer")
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  affiliate Affiliate?
}

model Customer {
  id        String   @id @default(cuid())
  document  String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  name      String
  orders    Order[]
}

model PixelEventLog {
  id            String   @id @default(cuid())
  pixelConfigId String
  pixelConfig   PixelConfig @relation(fields: [pixelConfigId], references: [id], onDelete: Cascade)
  
  eventType     String   // "PageView", "Purchase", etc
  eventData     Json?    // Dados do evento (valor, products, etc)
  orderId       String?  // Refer√™ncia opcional para convers√µes
  
  sessionId     String?  // Para agrupar eventos da mesma sess√£o
  userAgent     String?
  ipAddress     String?

  referrer      String?  // URL da p√°gina anterior
  landingPage   String?  // Primeira p√°gina visitada na sess√£o
  campaign      String?  // UTM campaign
  source        String?  // UTM source (google, facebook, etc)
  medium        String?  // UTM medium (cpc, organic, etc)
  term          String?  // UTM term
  content       String?  // UTM content
  
  createdAt     DateTime @default(now())
  
  @@index([pixelConfigId])
  @@index([eventType])
  @@index([createdAt])
  @@index([source])
  @@index([campaign])
  @@index([pixelConfigId, eventType, createdAt])
  @@index([orderId, eventType])
  @@index([sessionId, eventType])
  @@index([sessionId, pixelConfigId, eventType])
}

model PixelConfig {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  platform    String   // facebook, google_ads, google_analytics, tiktok, snapchat
  pixelId    String   // ID do pixel na plataforma
  enabled     Boolean  @default(true)
  events      Json     // Array de eventos a rastrear ["PageView", "Purchase", etc]
  customCode  String?  @db.Text // C√≥digo customizado se necess√°rio
  testMode    Boolean  @default(false) // Para testes sem disparar eventos reais
  metadata    Json?    // Dados adicionais espec√≠ficos da plataforma
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  eventLogs PixelEventLog[]

  @@unique([productId, platform, pixelId]) // Evita duplicatas
  @@index([productId])
  @@index([platform])
}


model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  productId   Int         @default(autoincrement())
  courseId    String?
  productType String      @default("evaluation")
  orderBumpOf OrderBump[] @relation("OrderBumpProducts")
  orderBumps  OrderBump[] @relation("ProductOrderBumps")
  orderItems  OrderItem[]
  prices      Price[]
  coupons     Coupon[]    @relation("CouponToProduct")
  splitConfigurationId String?
  splitConfiguration   SplitConfiguration? @relation(fields: [splitConfigurationId], references: [id])
  pixelConfigs PixelConfig[]
  rdStationConfig RDStationProductConfig?
}

model Price {
  id        String   @id @default(cuid())
  productId String
  amount    Int
  currency  String   @default("BRL")
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id                   String     @id @default(cuid())
  customerId           String
  status               String
  amount               Int
  paymentMethod        String
  installments         Int        @default(1)
  affiliateId          String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  couponId             String?
  splitAmount          Float?
  pagarmeTransactionId String?    @unique
  checkoutId           String?
  affiliate            Affiliate? @relation(fields: [affiliateId], references: [id])
  coupon               Coupon?    @relation(fields: [couponId], references: [id])
  customer             Customer   @relation(fields: [customerId], references: [id])
  items                OrderItem[] 
  failureReason     String?   // Motivo da falha (texto leg√≠vel)
  failureCode       String?   // C√≥digo espec√≠fico do erro
  pagarmeResponse   Json?     // Resposta completa da Pagar.me (para an√°lise)
  attempts          Int       @default(1) // N√∫mero de tentativas
  lastAttemptAt     DateTime? // Timestamp da √∫ltima tentativa

  @@index([checkoutId])
}

model OrderBump {
  id            String   @id @default(cuid())
  productId     String
  bumpProductId String
  discount      Float?
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bumpProduct   Product  @relation("OrderBumpProducts", fields: [bumpProductId], references: [id])
  product       Product  @relation("ProductOrderBumps", fields: [productId], references: [id])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id]) // Adicionar esta linha
}

model Affiliate {
  id          String   @id @default(cuid())
  userId      String   @unique
  commission  Float
  active      Boolean  @default(true)
  bankInfo    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipientId String?  @unique
  user        User     @relation(fields: [userId], references: [id])
  orders      Order[]
}

model Coupon {
  id                 String    @id @default(cuid())
  code               String    @unique
  active             Boolean   @default(true)
  discountPercentage Int
  usageCount         Int       @default(0)
  maxUses            Int?
  expiresAt          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  orders             Order[]
  products           Product[] @relation("CouponToProduct")
}

model CheckoutSettings {
  id                    String   @id @default(cuid())

    // Dados da empresa
  companyName           String
  logoUrl               String?

    // Cores
  primaryColor          String
  secondaryColor        String
  accentColor           String

  // Textos
  checkoutTitle         String
  checkoutDescription   String
  successMessage        String

  // URLs de pol√≠ticas
  termsAndConditionsUrl String?
  privacyPolicyUrl      String?

   // Configura√ß√µes de pagamento
  showInstallments      Boolean  @default(true)
  maxInstallments       Int      @default(12)
  showPixDiscount       Boolean  @default(false)
  pixDiscountPercentage Float    @default(0)
  defaultPaymentMethod  String   @default("credit_card")
  enableOrderBumps      Boolean  @default(true)

   // Banner principal (header)
  headerBackgroundImage String?   // Imagem desktop (campo existente)
  headerMobileImage     String?   // üÜï Imagem mobile
  headerMaxHeight       Int?      @default(350)
  headerVerticalAlign   String?   @default("center")
  headerEnabled         Boolean?  @default(true)

  // Banner lateral (sidebar) üÜï
  sidebarBannerImage    String?   // URL da imagem lateral
  sidebarBannerEnabled  Boolean?  @default(false)

  // Footer e CSS
  footerText            String?
  customCss             String?

  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt


  @@map("checkout_settings")
}

// Configura√ß√£o de Split
model SplitConfiguration {
  id            String          @id @default(cuid())
  name          String          // Nome descritivo para identifica√ß√£o
  description   String?         // Descri√ß√£o opcional
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Rela√ß√µes
  recipients    SplitRecipient[]
  products      Product[]        // Produtos que usam esta configura√ß√£o
}

// Recebedores individuais dentro de uma configura√ß√£o
model SplitRecipient {
  id                  String   @id @default(cuid())
  splitConfigurationId String
  configuration       SplitConfiguration @relation(fields: [splitConfigurationId], references: [id], onDelete: Cascade)
  
  recipientId         String   // ID do recebedor na Pagar.me
  recipientName       String?  // Nome do recebedor (para refer√™ncia interna)
  percentage          Float    // Porcentagem que este recebedor receber√°
  isLiable            Boolean  @default(false) // Se √© respons√°vel por chargebacks
  chargeProcessingFee Boolean  @default(false) // Se paga taxas de processamento 
  chargeRemainderFee  Boolean  @default(false) // Se paga taxas residuais
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// ===== INTEGRA√á√ÉO RD STATION =====

// Configura√ß√µes globais do RD Station
model RDStationConfig {
  id           String   @id @default(cuid())
  enabled      Boolean  @default(false)
  
  // Credenciais OAuth
  clientId     String?
  clientSecret String?
  accessToken  String?
  refreshToken String?
  tokenExpiresAt DateTime?
  
  // Configura√ß√µes de sincroniza√ß√£o
  syncEvents   Json     @default("[]") // ["pageView", "viewContent", "initiateCheckout", "addPaymentInfo", "purchase"]
  leadMapping  Json     @default("{}") // { "email": true, "name": true, "phone": true, "utmSource": true, ... }
  
  // Configura√ß√µes avan√ßadas
  autoSync     Boolean  @default(true)  // Sincroniza√ß√£o autom√°tica
  syncInterval Int      @default(300)   // Intervalo em segundos
  batchSize    Int      @default(50)    // Tamanho do lote para sync
  
  // Metadados
  lastSyncAt   DateTime?
  totalSynced  Int      @default(0)
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relacionamentos
  syncLogs     RDStationSyncLog[]
  
  @@map("rd_station_config")
}

// Log de sincroniza√ß√µes com RD Station
model RDStationSyncLog {
  id             String   @id @default(cuid())
  configId       String   // Refer√™ncia √† configura√ß√£o
  config         RDStationConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  
  // Dados do evento
  pixelEventId   String?  // Refer√™ncia ao PixelEventLog (opcional)
  eventType      String   // Tipo do evento original
  rdEventType    String   // Tipo mapeado para RD Station
  
  // Dados enviados
  leadEmail      String?  // Email do lead
  leadData       Json?    // Dados completos enviados
  
  // Status da sincroniza√ß√£o
  status         String   // "pending", "success", "error", "retrying"
  attempts       Int      @default(1)
  maxRetries     Int      @default(3)
  
  // Resposta da API
  rdStationId    String?  // ID retornado pelo RD Station
  response       Json?    // Resposta completa da API
  errorMessage   String?  // Mensagem de erro se houver
  errorCode      String?  // C√≥digo de erro espec√≠fico
  
  // Timestamps
  scheduledAt    DateTime @default(now())  // Quando foi agendado
  processedAt    DateTime?                 // Quando foi processado
  createdAt      DateTime @default(now())
  
  // √çndices para performance
  @@index([configId])
  @@index([status])
  @@index([pixelEventId])
  @@index([leadEmail])
  @@index([scheduledAt])
  @@index([rdEventType])
  @@map("rd_station_sync_log")
}

// Configura√ß√µes espec√≠ficas por produto (opcional)
model RDStationProductConfig {
  id           String  @id @default(cuid())
  productId    String
  product      Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Configura√ß√µes espec√≠ficas
  enabled      Boolean @default(true)
  customTags   Json?   @default("[]") // Tags espec√≠ficas para este produto
  customFields Json?   @default("{}") // Campos customizados
  
  // Mapeamentos espec√≠ficos
  eventMapping Json?   @default("{}") // Mapeamento de eventos espec√≠fico
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([productId])
  @@map("rd_station_product_config")
}


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          String    @default("customer") // admin, affiliate, customer
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relacionamentos
  affiliate     Affiliate?
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  email     String    
  document  String    @unique  // Alterado para unique
  phone     String?
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            String    @id @default(cuid())
  productId     Int       @default(autoincrement()) // autoincremental
  name          String
  description   String?
  active        Boolean   @default(true)
  prices        Price[]
  orderItems    OrderItem[]
  coupons       Coupon[]   // Nova relação
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

    // Relação com Order Bumps
  orderBumps      OrderBump[]  @relation("ProductOrderBumps")
  orderBumpOf     OrderBump[]  @relation("OrderBumpProducts")
}

model Price {
  id            String    @id @default(cuid())
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  amount        Int       // em centavos
  currency      String    @default("BRL")
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Order {
  id            String    @id @default(cuid())
  customerId    String
  customer      Customer  @relation(fields: [customerId], references: [id])
  status        String    // pending, paid, failed, refunded
  amount        Int
  items         OrderItem[]
  paymentMethod String
  installments  Int       @default(1)
  affiliateId   String?
  affiliate     Affiliate? @relation(fields: [affiliateId], references: [id])
  couponId      String?   // Novo campo
  coupon        Coupon?   @relation(fields: [couponId], references: [id]) // Nova relação
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  splitAmount   Float?    // Valor da comissão calculada
}

model OrderBump {
  id          String   @id @default(cuid())
  
  // Produto principal
  productId   String
  product     Product  @relation("ProductOrderBumps", fields: [productId], references: [id])
  
  // Produto oferecido como bump
  bumpProductId String
  bumpProduct   Product @relation("OrderBumpProducts", fields: [bumpProductId], references: [id])
  
  // Configurações do bump
  discount    Float?   // Desconto opcional para o bump
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderItem {
  id            String    @id @default(cuid())
  orderId       String
  order         Order     @relation(fields: [orderId], references: [id])
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  quantity      Int
  price         Int       // Preço no momento da compra
  createdAt     DateTime  @default(now())
}

model Affiliate {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  recipientId   String?   @unique
  commission    Float     // Percentual de comissão
  orders        Order[]
  active        Boolean   @default(true)
  bankInfo      Json?     // Informações bancárias
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Coupon {
  id                String    @id @default(cuid())
  code              String    @unique
  active            Boolean   @default(true)
  discountPercentage Int      // Valor entre 0 e 100
  usageCount        Int      @default(0)
  maxUses           Int?     // Null significa uso ilimitado
  expiresAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  orders            Order[]   // Pedidos que usaram o cupom
  products          Product[]  // Nova relação
}

model CheckoutSettings {
  id                    String    @id @default(cuid())
  companyName           String
  logoUrl               String?
  primaryColor          String
  secondaryColor        String
  accentColor           String
  checkoutTitle         String
  checkoutDescription   String
  successMessage        String
  termsAndConditionsUrl String?
  privacyPolicyUrl      String?
  showInstallments      Boolean   @default(true)
  maxInstallments       Int       @default(12)
  showPixDiscount       Boolean   @default(false)
  pixDiscountPercentage Float     @default(0)
  defaultPaymentMethod  String    @default("credit_card")
  enableOrderBumps      Boolean   @default(true)
  headerBackgroundImage String?
  footerText            String?
  customCss             String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("checkout_settings")
}